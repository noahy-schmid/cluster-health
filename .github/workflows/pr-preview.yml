name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  issues: write
  pull-requests: write
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: my-services

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ github.event.number }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBLIC_URL=/pr-${{ github.event.number }}

      - name: Install sshpass and setup SSH
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy container to droplet
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
          PR_NUMBER: ${{ github.event.number }}
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
        run: |
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            # Stop and remove existing container if it exists
            docker stop pr-$PR_NUMBER-service || true
            docker rm pr-$PR_NUMBER-service || true
            
            # Pull the new image
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull $IMAGE_TAG
            
            # Start the new container
            docker run -d \
              --name pr-$PR_NUMBER-service \
              --network pr-network \
              -p 3000 \
              -e PUBLIC_URL=/pr-$PR_NUMBER \
              --restart unless-stopped \
              $IMAGE_TAG
              
            echo 'Container pr-$PR_NUMBER-service started successfully'
          "

      - name: Configure NGINX for PR
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          # Upload NGINX template and configure
          sshpass -p "$DROPLET_PASSWORD" scp deployment/nginx/pr-deployments/template.conf $DROPLET_USER@$DROPLET_HOST:/tmp/template.conf
          
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            # Create PR-specific NGINX config from template
            sed 's/{{PR_NUMBER}}/$PR_NUMBER/g' /tmp/template.conf > /tmp/pr-$PR_NUMBER.conf
            sudo mv /tmp/pr-$PR_NUMBER.conf /etc/nginx-docker/pr-deployments/pr-$PR_NUMBER.conf
            rm /tmp/template.conf
            
            # Reload NGINX container to pick up new config
            docker exec nginx-proxy nginx -s reload
            
            echo 'NGINX configured for PR #$PR_NUMBER'
          "

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **PR Preview Deployed Successfully!**
              
              Your changes are now live at: http://${{ secrets.DROPLET_HOST }}/pr-${{ github.event.number }}
              
              âœ… **Deployment Details:**
              - **PR Number:** #${{ github.event.number }}
              - **Commit:** ${{ github.sha }}
              - **Docker Image:** ghcr.io/${{ github.repository_owner }}/my-services:${{ github.event.number }}
              - **Container:** pr-${{ github.event.number }}-service
              - **Build Status:** âœ… Success
              
              This preview will be automatically cleaned up when the PR is closed.`
            })