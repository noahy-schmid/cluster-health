name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

permissions:
  issues: write
  pull-requests: write
  contents: read
  packages: write

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: cluster-health
  DOCKER_REGISTRY: ghcr.io

jobs:
  deploy:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
          build-args: |
            PUBLIC_URL=/pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        
      - name: Setup deployment environment
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
          
      - name: Install Docker and upload deployment files
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          # Install Docker and Docker Compose if needed
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker \$USER
              rm get-docker.sh
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...'
              sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            sudo systemctl start docker
            sudo systemctl enable docker
          "
          
          # Upload deployment scripts
          sshpass -p "$DROPLET_PASSWORD" scp scripts/deploy-docker-pr.sh $DROPLET_USER@$DROPLET_HOST:~/
          sshpass -p "$DROPLET_PASSWORD" scp scripts/cleanup-docker-pr.sh $DROPLET_USER@$DROPLET_HOST:~/
          sshpass -p "$DROPLET_PASSWORD" scp scripts/configure-nginx-pr.sh $DROPLET_USER@$DROPLET_HOST:~/
          sshpass -p "$DROPLET_PASSWORD" scp docker-compose.pr-template.yml $DROPLET_USER@$DROPLET_HOST:~/
          
          # Make scripts executable
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "chmod +x ~/*.sh"
          
      - name: Deploy Docker container
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
          DOCKER_IMAGE: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
        run: |
          # Log in to container registry on droplet
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          "
          
          # Deploy the container
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            ~/deploy-docker-pr.sh ${{ github.event.number }} $DOCKER_IMAGE
          "
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            const basePort = 8000;
            const prPort = basePort + prNumber;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **PR Preview Deployed Successfully!**
              
              **Access URLs:**
              - Direct: http://${{ secrets.DROPLET_HOST }}:${prPort}
              - Via proxy: http://${{ secrets.DROPLET_HOST }}/pr-${prNumber}
              
              **Deployment Details:**
              - PR Number: #${prNumber}
              - Port: ${prPort}
              - Container: cluster-health-pr-${prNumber}
              - Docker Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
              
              This preview will be automatically cleaned up when the PR is closed.`
            })

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup SSH
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
          
      - name: Cleanup PR preview
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            if [ -f ~/cleanup-docker-pr.sh ]; then
              ~/cleanup-docker-pr.sh ${{ github.event.number }}
            else
              # Fallback cleanup
              docker stop cluster-health-pr-${{ github.event.number }} || true
              docker rm cluster-health-pr-${{ github.event.number }} || true
              rm -f ~/docker-compose.pr-${{ github.event.number }}.yml || true
            fi
          "
          
      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§¹ **PR Preview Cleaned Up**
              
              The preview deployment for this PR has been removed from the server.`
            })