name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

permissions:
  issues: write
  pull-requests: write
  contents: read
  packages: write

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: cluster-health
  DOCKER_REGISTRY: ghcr.io

jobs:
  deploy:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
          build-args: |
            PUBLIC_URL=/pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        
      - name: Install sshpass and setup SSH
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
          
      - name: Upload deployment scripts to droplet
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          # Install Docker and Docker Compose if not already installed
          echo "Checking Docker installation..."
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker \$USER
              rm get-docker.sh
              echo 'Docker installed successfully'
            else
              echo 'Docker is already installed'
            fi
            
            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...'
              sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo 'Docker Compose installed successfully'
            else
              echo 'Docker Compose is already installed'
            fi
            
            # Start Docker service if not running
            if ! sudo systemctl is-active --quiet docker; then
              echo 'Starting Docker service...'
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
          "
          
          # Check if Docker deployment scripts exist in home directory, if not upload them
          if ! sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "test -f ~/deploy-docker-pr.sh"; then
            echo "Uploading deploy-docker-pr.sh script..."
            sshpass -p "$DROPLET_PASSWORD" scp scripts/deploy-docker-pr.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy-docker-pr.sh
            sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "mv /tmp/deploy-docker-pr.sh ~/deploy-docker-pr.sh"
          fi
          
          if ! sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "test -f ~/cleanup-docker-pr.sh"; then
            echo "Uploading cleanup-docker-pr.sh script..."
            sshpass -p "$DROPLET_PASSWORD" scp scripts/cleanup-docker-pr.sh $DROPLET_USER@$DROPLET_HOST:/tmp/cleanup-docker-pr.sh
            sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "mv /tmp/cleanup-docker-pr.sh ~/cleanup-docker-pr.sh"
          fi
          
          # Upload NGINX proxy configuration template
          if ! sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "test -f ~/nginx-proxy.conf"; then
            echo "Uploading nginx-proxy.conf template..."
            sshpass -p "$DROPLET_PASSWORD" scp nginx-proxy.conf $DROPLET_USER@$DROPLET_HOST:/tmp/nginx-proxy.conf
            sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "mv /tmp/nginx-proxy.conf ~/nginx-proxy.conf"
          fi
          
          # Make scripts executable
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "chmod +x ~/deploy-docker-pr.sh ~/cleanup-docker-pr.sh"
          
      - name: Deploy Docker container to DigitalOcean Droplet
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
          DOCKER_IMAGE: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
        run: |
          # Log in to container registry on droplet
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          "
          
          # Deploy the Docker container
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            ~/deploy-docker-pr.sh ${{ github.event.number }} $DOCKER_IMAGE
          "
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **PR Preview Deployed Successfully!**
              
              Your changes are now live at: http://${{ secrets.DROPLET_HOST }}/pr-${{ github.event.number }}
              
              ✅ **Deployment Details:**
              - **PR Number:** #${{ github.event.number }}
              - **Commit:** ${{ github.sha }}
              - **Deployed at:** $(date -u)
              - **Build Status:** ✅ Success
              - **Deployment Type:** 🐳 Docker Container
              - **Docker Image:** ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:pr-${{ github.event.number }}
              
              This preview will be automatically cleaned up when the PR is closed.`
            })

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
      - name: Install sshpass and setup SSH
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
          
      - name: Cleanup PR preview
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          # Check if Docker cleanup script exists and run it
          sshpass -p "$DROPLET_PASSWORD" ssh $DROPLET_USER@$DROPLET_HOST "
            if [ -f ~/cleanup-docker-pr.sh ]; then
              ~/cleanup-docker-pr.sh ${{ github.event.number }}
            else
              echo 'Docker cleanup script not found, performing manual cleanup...'
              # Stop and remove container
              docker stop cluster-health-pr-${{ github.event.number }} || true
              docker rm cluster-health-pr-${{ github.event.number }} || true
              # Remove compose file
              rm -f ~/docker-compose.pr-${{ github.event.number }}.yml || true
              echo 'PR container removed'
            fi
          "
          
      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🧹 **PR Preview Cleaned Up**
              
              The preview deployment for this PR has been removed from the server.`
            })